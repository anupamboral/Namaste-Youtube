//*Notes

//* So when we go to give a interview and it is a machine coding round then with the interviewer we have to first discuss some important things the first thing is requirement clarification so basically we will be asking what are the features we are going to build just say like for example we are building a youtube like application so UT is nota very small application it has so many features to build that is why we will first clarify that what are the requirements and what are the features we are gonna develop then next we will discuss that what are the Text Stack we'll be using so just like we will use redux for state management and for everything you choose you should know a justification that why are you choosing that specific technology like here we are choosing redux because we are going to deal with a lot of data so if it was a small application then it would be great if we could use context api for state management but as it will bea very data heavy application that's why we will use the redux library as a state management library then next for styling purposes we will be using tailwind css and do not for get to justify why we are choosing it so we will choose tailwind ceases as it will make our development process so much faster because it offers classes which will help us to develop the styling of the any component so much faster and then for routing we will using react router dom and then for bundling we will be using parcel and every time you choose something you should justify why you are using it so we already know parcel has hmr or some hot module replacement and many other features which we can see in parcel's website so basically it is a very good bundle rbut before giving the interview you should know in detail that what are the justifications you will be using to justify YRU choosing that specific technology and then for testing purpose we will use react testing library and Jest. And to discuss this tech stack You should not take more than 5 minutes and also the requirement clarifications may take 5 to 10 minutes. Now usually when you are choosing any text stack the interviewers are not that rigid that they will say you should choose another technology that usually not happens but in some special cases it may happen that they can say you have to use normal css , you should be ready for that also but usually it does not happen.

//*Now after you have discussed the features after you have discussed the tech stack, now  you have to spend the next 5 minutes in planning, don't start writing code, right now see "discussing text stack discussing how your app will work tailwind and all that stuff comes into high level design" , "low level design comes in that how do you structure your components, how will you use your ui and data layer together and a lot of other things".

//* see image - Project Planning.png
//* That is known as low level design so you will have to focus 5 minutes on that , so  I have also seen youtube app why am I discussing the same with interviewer why am I discussing the same within the interviewer ,because you will be on the same page with interviewer ,you can build youtube with thousands of different ways , you can build youtube in thousands of different ways, you will discuss your approach with that and you will be on the same page.
//*So with a normal drawing, so I would say , Akshay so when I will develop my youtube app, my youtube app will obviously have a header , like we have in our youtube app and what else I will develop, I will develop a header and this header will have a menu , which is  to open the side panel .
//* so here in the left, I will have a side panel what comes inside my side panel side panel consists of some links like subscriptions,library and some other stuff , if you click on that  menu icon , it just collapses when you click the menu btn and if you click again then it will expand, and it just comes out I will develop this feature,then comes our youtube logo beside the menu icon, so we will have a youtube logo ,and after logo our search bar will be present, and then beside that we have our user icon after the search bar., then  we will have our body in the middle, what does this body contain? videos(video components), but we have some topic filter  buttons ,these are button list kind of , we will have some filter buttons and then below buttons we will have our main videos which will render over here right so we will build like this  and suppose if I click on a video it will open a new video page .
//*   And then we will also discuss that if I click on the video it will take me to a new page,which is known as watch page,it is known as /watch/videoName in the url when we click on any video , let us go back to our design ,you can say when we will open /watch by clicking on any video, so it will open a watch page it will have the same header, it will have a video playing in the left, it will have some video suggestions in the right and it will have a comment section .
//* Does that make sense this will be a video playing over here got it does that make sense this is how you have to discuss I think this is good enough let us let us try to build at least this much.

//* While planning we will also have to spend 5 more minutes to discuss how we will differentiate the components so basically what will be the components we will be creating so first of all we will create a header component then in the side we will create a sidebar component and it will be in the left side and then in the right side our body component will exist and inside the body component at the top position there will be a button list component and below the button list component there will be a video container component.

//* Now in the previous project we installed every package from scratch but in this project as we are doing it as a machine coding round so we are not going to instal every package one by one because time is very limited for this kind of coding rounds so it does not make any sense to instal every package one by one we should prefer that for big projects but for now we will use create react app package which will automatically instal all of the necessary package swe will need to build a project so let us run the command.
// //*npx create-react-app namaste-youtube
//* Remember in npx is used for running or executing any package and create react app is a package and we are executing it using npx.
//* and now just run the script - npm start  ............ to run the live server
//* That will help us know more about creating the appwe do not need parcel here we already have web pack setup along with this right we already have the path along this so if we see it has created folder structure for us it has already created an intense dot js it has already created app.js for us it is loaded this appright so now it might have some formula no more few things right it has set up testing also for you if you will go to Pathways Dot Json you would find that it already has testing library for you
//* inside the src folder there is a reportWebVitals.js file , what's a work of it?
/*By default, Create React App includes a performance relayer that allows you to measure and analyze the performance of your application using different metrics.

To measure any of the supported metrics, you only need to pass a function into the reportWebVitals function in index.js:
//*example
reportWebVitals(console.log);
This function is fired when the final values for any of the metrics have finished calculating on the page. You can use it to log any of the results to the console or send to a particular endpoint.*/
//* inside index.js <App/> is wrapped inside <React.StrictMode> component , but what is this <React.StrictMode> component?
//* <StrictMode> lets you find common bugs in your components early during development.
//* Know for styling we will again use tailwind css so lets instal it asa dev dependency using the command - npm i -D tailwindcss and create the configuration of it by running the command : - npx  tailwindcss init
//* it will Initialize tailwind css in our project and create the configuration file
//* now we need to Configure your template paths inside the config file of tailwindcss to tell tailwindcss in which files we want to use it. so we just need to set the content property's value to "./src/**/*.{html,js}".

//* Twitterpilgrim.conflict.cssconflict.js right what do we config over here do you remembernow we will tell our tailwind what files to track we will tell our tailwind what files to track remember we wrote something over here what what file should I trackall the files inside my srcwhich has an extension ofwhich has an extension of jshtmlplease track all these fileswe can just write Js also because all the files are javascript files not we don't have a html file right does that mean does that make sensewe have configured this upcool so now we have done that now what we have to do now we will write all our css inside our GS5 but what css do we write inside our css file now I don't need any of it but I will need few things inside index .css or app dot css over here what those three lines do you remember what were those three lineswe will be doing at the red tailwind what will be installed based first of all and then we will instalwhat components is it not components what was the third thingutilities exactly you people are amazing you people remember everything right so our css file will only have these three rights and we will not touch this css file forever now.
//* now we need to Add the Tailwind directives to our index.css file . so we can remove all of the pre-written css and then add these three lines:-
/*@tailwind base;
@tailwind components;
@tailwind utilities;*/
//* And as we are using create react app so there is no need to add the post css,because it is already installed by our create react app.

/* our decided  components
 * Head
 * Body
 *   SideBar
 *     MenuItems
 * Main Container
 *   ButtonList
 *   VideoContainer
 *      VideoCard*/
//* so now let's create our Head component, so inside our src folder we will create a components folder and then inside it we will create a Head.js file. and now inside this file, till now we used to write it from scratch but now we should learn a shortcut for creating a component, inside the Head.js file if we just write `rafce` then click enter then we will get a boilerplate of the component. So when we are giving interview then to save time we can use this shortcut.
//* 'rafce' stands for react arrow function export component. it create a boilerplate component using arrow function and export it by default.
//* there is another shortcut "rafc" which stands for "react arrow function component" it also creates a boilerplate component using arrow function but it does not create the export statement.
//* So now we already created our head component so now lets create the other components we will have now below the head component we will have our body component and inside the body component in the left side there will be a sidebar component so let us create the body and the sidebar component, And we will import the sidebar component inside the body component and we will also import the body component here in app.js and put it below the head component.
//* Now inside the body component at the right side there will be a main container component and inside this main container at the top we will have a button list component and below the button list component we will have a video container component so first of all we will create our main container and import it inside the body component and align the sidebar component and main container component side by side using tailwind css and now inside the main container first we will have a button list so now we will create a button list component and import it inside the video container component and then we will also create a video container component and put it below the button list component. we are just structuring our components by building the skeleton.
//* So lets build our head component so first of all inside the head component we will hav ea menu icon and beside the menu icon we will have a youtube logo so we will put these two inside one division so this will be our first division then in the middle we will have a search barS a search input and a surge button so our second division will be for these two and at the last we will have our user icon and for giving every division it is required space we will use grid this times oit will help us to give different amount of portions to different divisions so basically when we use grid then we can divide the whole width into12 portions and whatever part of the 12th portion we can mention that in every division because for the first division which contains the logo and the menu icon we will need a small portion like one portion of 12th and the search bar requires a bit more space S we will give it10th portion or 9th portion and at last the user I cancan be adjusted inside one portion. to do it we have mention grid and grid-flow-col property in the parent div and in the child div we have to mention col-span-1 property if we want to give any div only one portion.
//* So now lets create the sidebar component so inside the sidebar component we will create some unordered list and here we will put all of them enu options like home shorts videos subscriptions and many others.
//* Now after creating all of the menu items of the sidebar so now we want to build a functionality to basically collapse and expand the sidebar on the click off menu button but one problem is the menu button exists on the head component and the sidebar is inside the body component so basically two different component sand to implement this functionality we would need a state variable which will keep track if the sidebar is expanded or collapsed but if we want to just use a normal U state hook in that case we have to lift the state up and basically put the state variable in the app component because they are only the head and body component both exist so rather than putting the state variable in the app component it would be very much better if we have a global state space ,Because from this global space any component can access  the data as necessary.
//* Now to create the global space to keep the data we will create a redux store so we have used also in the previous project and we will also use it hereSo now to use Redux we have to install Two dependencies one is redux toolkit and second one is react-redux.
//* command - npm install @reduxjs/toolkit , npm install react-redux
//* Now we will create our Redux store so its time to create our details folder inside our src folder and inside the utils folder we will create our store and we will name it store.js and inside it we will import a function from redux toolkit named configureStore . So it is a function and inside it we have to pass our object and inside this object we have to mention the reducer Object so it is the main reducer object which will contain all of the reducer Of the slices.
//* And now we will create the slice which we will name appSlice.js inside the utils folder and in this file appslices.js first we will import create slice function from Redux Toolkit and then after that we will create a constant and name it app slice and then its value will be create slice function call and inside the function call we will create an object and its first property will be the name and the name will be again appSlice, And then the next property will be initial state so here we have to mention that what will be the initial state of the side bar , As by default it will be open so the initial state will be isOpen=true ; And then we will create the next property which will be reducers and inside this object so reducers is basically an object and inside it we write all of the actions we need so inside it we will write our first action named "toggleMenu"; And inside this toggle menu has a property we will mention the state because to access the state so basically the initial state inside this action we have to mention it as a property, And then inside the arrow function we will write the condition that whatever the current value of the isOpen property just set its value to its opposite so basically we will use the not! operator. like this:-
/*const appSlice = createSlice({
  name: "appSlice",
  initialState: {
    isNavOpen: true,
  },
  reducers: {
    toggleMenu: (state) => {
      state.isNavOpen = !state.isNavOpen;
    },
  },
});
export const { toggleMenu } = appSlice.actions;
export default appSlice.reducer;*/
//* And then after exporting the action and the reducer now we have to go inside the store we created and there we have to import this slice and mention it inside the reducer of the store.like this://*const store = configureStore({
/* const store = configureStore({
  reducer: {
    app: appSlice,
  },
});*/
//*And now we need to import this store inside our app js and then from react redux we have to import the provider component and wrap our head and body component inside the provider   as an attribute of the provider component we have to mention the store attribute and its value will be our redux store from store.js which we created
